package MetaData

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TransferMoney) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "from":
			z.From, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		case "to":
			z.To, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "To")
				return
			}
		case "pubkey":
			z.Pubkey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "amount":
			z.Amount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		case "timestamp":
			z.Timestamp, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "sig":
			z.Sig, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Sig")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransferMoney) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "from"
	err = en.Append(0x86, 0xa4, 0x66, 0x72, 0x6f, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteString(z.From)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	// write "to"
	err = en.Append(0xa2, 0x74, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteString(z.To)
	if err != nil {
		err = msgp.WrapError(err, "To")
		return
	}
	// write "pubkey"
	err = en.Append(0xa6, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Pubkey)
	if err != nil {
		err = msgp.WrapError(err, "Pubkey")
		return
	}
	// write "amount"
	err = en.Append(0xa6, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Amount)
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// write "sig"
	err = en.Append(0xa3, 0x73, 0x69, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Sig)
	if err != nil {
		err = msgp.WrapError(err, "Sig")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransferMoney) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "from"
	o = append(o, 0x86, 0xa4, 0x66, 0x72, 0x6f, 0x6d)
	o = msgp.AppendString(o, z.From)
	// string "to"
	o = append(o, 0xa2, 0x74, 0x6f)
	o = msgp.AppendString(o, z.To)
	// string "pubkey"
	o = append(o, 0xa6, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Pubkey)
	// string "amount"
	o = append(o, 0xa6, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Amount)
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendString(o, z.Timestamp)
	// string "sig"
	o = append(o, 0xa3, 0x73, 0x69, 0x67)
	o = msgp.AppendString(o, z.Sig)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransferMoney) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "from":
			z.From, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		case "to":
			z.To, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "To")
				return
			}
		case "pubkey":
			z.Pubkey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "amount":
			z.Amount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		case "timestamp":
			z.Timestamp, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "sig":
			z.Sig, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sig")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransferMoney) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.From) + 3 + msgp.StringPrefixSize + len(z.To) + 7 + msgp.StringPrefixSize + len(z.Pubkey) + 7 + msgp.IntSize + 10 + msgp.StringPrefixSize + len(z.Timestamp) + 4 + msgp.StringPrefixSize + len(z.Sig)
	return
}
